x<-seq(0,3,0.1)
z<-round(pnorm(x,0,1),4)
ztable <- cbind(z=x,prob=z)
head(ztable)
z
x <-seq(-4,4,0.1); y <-dnorm(x); plot(x,y,type="l");
x.points <-seq(-4,1,0.1); y.points <-dnorm(x.points)
polygon(c(x.points,1),c(y.points,0),col="blue")
x<- seq(50,140,length=200)
y1<- dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2<- dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
cord.x2<- c(0,seq((round(1-qnorm(0.025,110,10))),100,1),100)
cord.y2 <- c(0,dnorm(seq((round(1-qnorm(0.025, 110, 10))), 100, 1), 110, 10),0)
polygon(cord.x2,cord.y2,col='red')
abline(v=round(qnorm(0.975, 80, 10, lower.tail=T)))
abline(v=round(qnorm(0.025, 80, 10, lower.tail=T)))
cord.x1 <- c(100,seq(round(qnorm(0.975, 80, 10, lower.tail=T)), 140,1),140)
cord.y1 <- c(0,dnorm(seq(round(qnorm(0.975, 80, 10, lower.tail=T)),140, 1), 110, 10),0)
polygon(cord.x1,cord.y1,col='6')
text(95,0.005, "ÃŸ ",xpd=5)
text(115,0.005, "1-ÃŸ ",xpd=5)
set.seed(200)
instrument1 <- round(rnorm(20,6,0.5),3)
instrument2 <- round(rnorm(20,6,2),3)
comparemethods <- cbind(instrument1, instrument2); boxplot(comparemethods)
BlandAltman <- function(f) {
#read in a file to a data.frame
PEF <- read.csv(f)
#calculate S(x,y)
PEF$Sx <- (PEF[,1]+PEF[,2])/2
PEF$Sy <- PEF[,1]-PEF[,2]
#Draw a graph The argument ylim decides the lowest and highest y-axis values
plot(PEF$Sx,PEF$Sy, ylim=c(mean(PEF$Sy)-2.2*sd(PEF$Sy), mean(PEF$Sy)+2.2*sd(PEF$Sy)),
ylab="Difference
in PEFR (L/min)", xlab="Average PEF by two meters (L/min)", pch=20,
main="Difference against mean for PEFR data")
#Add lines
abline(h=mean(PEF$Sy), lty=3)
abline(h=mean(PEF$Sy)+1.96*sd(PEF$Sy), lty=2)
abline(h=mean(PEF$Sy)-1.96*sd(PEF$Sy), lty=2)
}
BlandAltman("BlandAltman.csv") #File must be in working directory
clear()
dengue.fewer <-c(3000,3200,3500,5068,5679,6200,6300,7020)
scrub.typhus<-c(4400,4500,5900,6839,7561,9047,12300,14000)
wilcox.test(dengue.fewer,scrub.typhus)
?wilcox.test()
t.test(dengue.fewer,scrub.typhus,var.equal=T)
ttest.wilcox.examples <- function(x,y,z,k)
{
subjects <- x
mean1 <- y
mean2 <- z
standarddev <- k
print( c("Number of measurements:   ", x))
print( c("Mean of group 1: ", y))
print( c( "Mean of group 2: ",z))
print( c("Standard deviation:  ", k))
group1 <- rnorm(x, y, k)
group2 <- rnorm(x, z, k)
framedata <- cbind(group1, group2)
print(framedata)
print( list (t.test(group1, group2, var.equal = T), wilcox.test(group1, group2)))
}
ttest.wilcox.examples <- function(x,y,z,k)
{
subjects <- x
mean1 <- y
mean2 <- z
standarddev <- k
print( c("Number of measurements:   ", x))
print( c("Mean of group 1: ", y))
print( c( "Mean of group 2: ",z))
print( c("Standard deviation:  ", k))
group1 <- rnorm(x, y, k)
group2 <- rnorm(x, z, k)
framedata <- cbind(group1, group2)
print(framedata)
print( list (t.test(group1, group2, var.equal = T), wilcox.test(group1, group2)))
}
?rnorm()
set.seed(570)
ttest.wilcox.examples(13,90,100,10)
compare.hypothesis.tests <- function(n,y,z,k)
{
sample.size <- n
mean1 <- y
mean2 <- z
standarddev <- k
group1 <- rnorm(n, y, k)
group2 <- rnorm(n, z, k)
framedata <- cbind(group1, group2)
print(framedata)
print( list
(t.test(group1, group2, var.equal = T),
t.test(group1, group2, paired=T),
t.test(group1, group2, var.equal=T, alternative = "less"),
t.test(group1, group2, var.equal=T, alternative = "greater"),
wilcox.test(group1, group2),
wilcox.test(group1, group2, paired=T)))
}
set.seed(570); compare.hypothesis.tests(13,90,100,10)
uset.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(896);
run<- data.frame(time=rnorm(50,mean=50,sd=10),training.method=rep(letters[1:5],each=10));
summary(aov(run$time~run$training.method))
run[1:10,1] <- run[1:10,1] - 15
summary(aov(run$time~run$training.method))
kruskal.test(run$time~run$training.method)
set.seed(278)
x <- rnorm(25, mean=100, sd=10)
y <- 2 * x + 20 + rnorm(25, mean=10, sd=4)
cor(x,y)  #If you just want the correlation coefficient
cor(x,y)^2 #Or the coefficient of determination
cor(x,y, method="spearman")
set.seed(570)
group1 <- rnorm(13,90, 10)
group2 <- rnorm(13,100,10)
#So letâ€™s pool the values in one group for a while
group <- c(group1,group2)
#We sample new random groups from the same data, with replacement
dif <- numeric(10000)
for(i in 1:10000){
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
}
hist(dif)
Fn <- ecdf(dif)
plot(Fn)
measured.dif <- mean(group1)-mean(group2)
Fn(measured.dif)
t.test(group1,group2, var.equal=T)$p.value
t.test(group1,group2, var.equal=T, alternative = "less" )$p.value
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
plot(groupA)
hist(groupA)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
hist(groupA)
plot(groupA)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
hist(groupA)
wilcox.test(groupA,groupB,paired = TRUE)
wilcox.test(groupA,groupB)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
cor(groupA,Activity)
cor(Activity,groupA)
?cor()
?cor(method="spearman")
cor(method="spearman")
cor(Activity,groupA,method="spearman")
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
?kruskal.test()
kruskal.test(list(groupA,groupB,groupC))
kruskal.test(list(groupA,groupB,groupC))
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(groupA,groupB, paired=TRUE)
wilcox.test(groupA,groupB)
t.test(groupA,groupB, paired=FALSE)
power.t.test(n = 20, delta = 1)
?power.t.test()
measurements <- rnorm(40)^2
qqnorm(measurements)
?rnorm()
qqnorm(measurements)
?rnorm()
?qqnorm()
require(graphics)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
?qqnorm()
qqnorm(precip, ylab = "Precipitation [in/yr] for 70 US cities")
?qqnorm()
qqnorm(measurements)
?qqnorm()
qqnorm(x); qqline(x)
qqnorm(measurements); qqline(measurements)
hist(measurements)
hist(x~measurements)
hist(,measurements)
measurements
boxplot(measurements)
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
A
teamA <-rnorm(10, mean=34, sd= 10)
teamB <-rnorm(10, mean=40, sd= 10)
time <- c(teamA,teamB)
place <- rank(time)
> results <- data.frame(place, time, team)
> plot(time, place, pch=team)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
wilcox.test(teamA,teamB)
teamA
?wilcox.test()
wilcox.test(teamA,teamB,paired=FALSE)
teamA <-rnorm(10, mean=40, sd= 10)
set.seed(12)
team <- c(rep("A",10),rep("B",10))
teamA <-rnorm(10, mean=40, sd= 10)
teamB <-rnorm(10, mean=40, sd= 10)
time <- c(teamA,teamB)
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
wilcox.test(teamA,teamB)
set.seed(12)
teamA <-rnorm(10, mean=40, sd= 10)
teamB <-rnorm(10, mean=34, sd= 10)
time <- c(teamA,teamB)
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
wilcox.test(teamA,teamB)
set.seed(10)
team <- c(rep("A",10),rep("B",10))
teamA <-rnorm(10, mean=34, sd= 10)
teamB <-rnorm(10, mean=40, sd= 10)
time <- c(teamA,teamB)
> place <- rank(time)
> results <- data.frame(place, time, team)
> plot(time, place, pch=team)
> wilcox.test(teamA,teamB)
time <- c(teamA,teamB)
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
wilcox.test(teamA,teamB)
set.seed(12)
teamA <-rnorm(10, mean=34, sd= 10)
teamB <-rnorm(10, mean=40, sd= 10)
time <- c(teamA,teamB)
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
wilcox.test(teamA,teamB)
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
swirl()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
dq
de12
1
1
e1
;
c(3, 5, NA, 10)c(3, 5, NA, 10)
c(3, 5, NA, 10)
?arrange
?arrange()
find.packge("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
install.packages("KernSmooth")
find_rtools()
find.package("KernSmooth")
?KernSmooth
??KernSmooth
load(KernSmooth)
load("KernSmooth")
find.package("KernSmooth")
load(KernSmooth)
library(KernSmooth)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL")
q()
install.packages("RMySQL")
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
librart(R_LIBS
librart(RMySQL)
library(RMySQL)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
q()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
q()
library(XML)
fileUrl <-"http://biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
myapp = oauth_app("twitter",
key="yourConsumerKeyHere",secret="yourConsumerSecretHere")
myapp = oauth_app("twitter",
key="hnb100",secret="password1")
q()
?oauth_app()
myapp = oauth_app("Hari's_app",
key="C2RVCaSKgQBZZPJOqJJATSQRK",secret="ap2fC5BE5fACw8LFy5QDCYmrAMSYSV1g3H8tz1rx2HiEUIfaEX")
myapp = Hari's_app("twitter",
key="C2RVCaSKgQBZZPJOqJJATSQRK",secret="ap2fC5BE5fACw8LFy5QDCYmrAMSYSV1g3H8tz1rx2HiEUIfaEX")
)
""
""
gfea
2
"
"
library(utils)
activity<-read.csv("activity.csv")
activity<-read.csv("activity.csv")
getwd()
setwd("R")
setwd("Getting and Cleaning Data")
activity<-read.csv("activity.csv")
library(stats)
filter <-aggregate(steps~date ,activity,FUN=sum) #creates a datatable with columns date    and total-steps-per-day
num_of_days <- length(filter$date)
hist(filter$steps,num_of_days) #length(filter$date) = 53 : the number of days
mean_step <- mean(filter$steps)
mean_step
median_step <- median(filter$steps)
median_step
day_pattern <- activity[,c(1,3)]
plot(day_pattern,main="Basic plot with no modifications")
day_pattern <- aggregate(steps ~ interval, day_pattern, mean)
plot(day_pattern,type = "l",ylab="avg steps per interval",main="Activeness per time period of the day")
most_steps <- max(aggregate(steps ~ interval, day_pattern, mean)[,2],na.rm=T)
most_steps
which(day_pattern$steps == most_steps, arr.ind = TRUE)  #gives the index
active_interval <- (day_pattern[104,1])      #since intervals start from 0
active_interval
filled_activity <- activity
Steps <- filled_activity$steps
NArows <- Steps[is.na(Steps)]
length(NArows)
#ndices_of_NAs <- which(is.na(filled_activity))
length(NArows)
ndices_of_NAs <- which(is.na(Steps))
filled_activity[which(is.na(Steps)),1] <-                         day_pattern[filled_activity[indices_of_NAs,3]/5+1,2]
filled_activity[which(is.na(Steps)),1] <-                         day_pattern[filled_activity[indices_of_NAs,3]/5+1,2]
filled_activity[ndices_of_NAs,1] <-day_pattern[filled_activity[ndices_of_NAs,3]/5+1,2]
filter2 <-aggregate(steps~date ,filled_activity,FUN=sum) #creates a datatable with   columns date    and total-steps-per-day
num_of_days2 <- length(filter2$date)
hist(filter2$steps,num_of_days2)
View(filter2)
View(filled_activity)
filter <-aggregate(steps~date ,activity,FUN=sum) #creates a datatable with columns date    and total-steps-per-day
num_of_days <- length(filter$date)
hist(filter$steps,num_of_days) #length(filter$date) = 53 : the number of days
mean_step <- mean(filter$steps)
mean_step
median_step <- median(filter$steps)
median_step
day_pattern <- activity[,c(1,3)]
plot(day_pattern,main="Basic plot with no modifications")
day_pattern <- aggregate(steps ~ interval, day_pattern, mean)
plot(day_pattern,type = "l",ylab="avg steps per interval",main="Activeness per time period of the day")
most_steps <- max(aggregate(steps ~ interval, day_pattern, mean)[,2],na.rm=T)
most_steps
which(day_pattern$steps == most_steps, arr.ind = TRUE)  #gives the index
active_interval <- (day_pattern[104,1])      #since intervals start from 0
active_interval
filled_activity <- activity
Steps <- filled_activity$steps
NArows <- Steps[is.na(Steps)]
length(NArows)
ndices_of_NAs <- which(is.na(Steps))
filled_activity[ndices_of_NAs,1] <-day_pattern[filled_activity[ndices_of_NAs,3]/5+1,2]
knitr::opts_chunk$set(cache=TRUE)       #it makes the variables accessible from other                 code chunks
filter2 <-aggregate(steps~date ,filled_activity,FUN=sum) #creates a datatable with   columns date    and total-steps-per-day
num_of_days2 <- length(filter2$date)
hist(filter2$steps,num_of_days2)      #length(filter$date) = 53 : the number of days
mean(filter2$steps)
median(filter2$steps)
df = data.frame(date=filled_activity$date)
wkday <-c("Monday","Tuesday","Wednesday","Thursday","Friday")
df$day <- weekdays(as.Date(df$date))
filled_activity$weekday <-df$day %in% wkday  #1 if weekday, 0 otherwise
head(filled_activity)
week_pattern <-sqldf("select interval,avg(steps) as avg_steps,weekday  from filled_activity group by weekday,interval")
head(week_pattern)
plot(week_pattern[,-3],type = "l",ylab="avg steps per interval per weekday_end",main="Activeness per type of day")
week_pattern <-sqldf("select interval,avg(steps) as avg_steps,weekday  from filled_activity group by weekday,interval")
head(week_pattern)
library(sqldf)
week_pattern <-sqldf("select interval,avg(steps) as avg_steps,weekday  from filled_activity group by weekday,interval")
head(week_pattern)
plot(week_pattern[,-3],type = "l",ylab="avg steps per interval per weekday_end",main="Activeness per type of day")
week_pattern <-sqldf("select interval,avg(steps) as avg_steps from filled_activity where weekday='FALSE' group by interval")
head(week_pattern)
sqldf("select interval,avg(
""
sqldf("select interval,avg(steps) as avg_steps from filled_activity where weekday='FALSE' group by interval")""
sqldf("select interval,avg(steps) as avg_steps from filled_activity where weekday='FALSE' group by interval")
View(filled_activity)
sqldf("select interval,avg(steps) as avg_steps from filled_activity where weekday='TRUE' group by interval")
sqldf("select interval,avg(steps) as avg_steps from filled_activity where weekday='TRUE' group by interval")
sqldf("select interval,avg(steps) as avg_steps from filled_activity  group by interval")
sqldf("select interval,avg(steps) as avg_steps,weekday from filled_activity where weekday='TRUE' group by interval")
sqldf("select interval,avg(steps) as avg_steps,weekday from filled_activity where group by interval")
sqldf("select interval,avg(steps) as avg_steps,weekday from filled_activity group by interval")
sqldf("select interval,avg(steps) as avg_steps,weekday from filled_activity group by interval")
sqldf("select interval,avg(steps) as avg_steps,weekday from filled_activity group by interval")
sqldf("select interval,avg(steps) as avg_steps from filled_activity group by interval")
View(day_pattern)
sqldf("select interval,avg(steps),weekday as avg_steps from filled_activity where weekday='FALSE' group by interval,weekday")
sqldf("select interval,avg(steps),weekday as avg_steps from filled_activity group by interval,weekday")
sqldf("select interval,avg(steps),weekday as avg_steps from filled_activity where weekday='1' group by interval,weekday")
weekend_pattern <- sqldf("select interval,avg(steps),weekday as avg_steps from filled_activity where weekday='0' group by interval,weekday")
head(weekend_pattern)
plot(weekend_pattern,type = "l",ylab="avg steps per interval per weekday_end",main="Activeness per type of day")
?unzip
?hist
load("C:/Users/hari/Downloads/weekdays_1c392be73817320706d276441445ce4e.RData")
?knit2html
knit2html(PA1_template.Rmd)
library(knitr)
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
getwd()
cd ..
setwd("C:\Users\hari\Documents\R\Reproducible Research\Assignment1")
setwd("C:/Users/hari/Documents/R/Reproducible Research/Assignment1")
knit2html("PA1_template.Rmd")
getwd()
